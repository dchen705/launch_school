# 1 hour and 6 minutes to solve
# i solved but i could barely talk while working on it
# fstruggled with condensing 10 element array into 5 element array
# iterating through array and branching logic by index

# # struggling w/ regex: \d means?
# # Kernel.srand?
#   # After reading at docs:
# #   srand 1234
# # [ rand, rand ]
# #   srand 1234
# # [ rand, rand ]
# so random generator `rand` is pseudorandom meaning it''s not actually random,
# a specific seed sets the sequence of random numbers to be predetermined.
# you can seed with a specific number to select a particular "random" sequence
# purpose is for testing
# makes sure we are testing by using the same sequence of "random" numbers
# it''s also used for one of the tests, to make sure that if name is taken, then to use a different value

# # really struggling to talk and do at same time

# # really struggled with data manipulation

# # while i'm solving im trying to decide how to optimally split the 10 digit
#   # - cut off 2 at a time
#   # - or split by 2 all at once

# many different Robots each with unique name
#   - Robot class
#     - name attribute (random)

# a robot has 2 functions
#   - they are constructed and given a random name
#   - they can be reset, old random name is deleted, new one given

# rules/requirements
# Robot class
#   - names
#     - random, not predictable sequence, no dups/collisions
#       - have some way to check already given names and reroll if random hits. (doesn''t scale well)
#   -   - must follow regex pattern

# Clarifying Questions
#   - predictable sequence?
#     like robot 1, robot 2, etc...?
#   - examples they give us: are we structuring like them?
#     RX837 or BC811.?
#     - is there a set structure to follow?
#     - rules
#       upcase, downcase?
#       letters, numbers, special characters?
#       required length?
# Examples / Test Cases

# Robot class
#   constructor
#   getter for @name which is assigned without  during construction
#   reset
#     @name gets changed to different value but same pattern

# DS
# converting random value between 0-1 to either letter(A-Z) or digit
# /^[A-Z]{2}\d{3}$/
# _____
# rand

# loop
# #random_name
# - given 'random' value generated by #rand
# - assign `name_id` to first 10 digits of `random`
# - check `existing_ids`class variable and break if name_id is uniq

# - add `name_id` to a class variable of `existing_ids`
# - set `single_chars`
# - 3 times iteration:
#   - use divmod 100 to split the last 2 digits and reassign dividend back to `name_id`, set `two_digits`
#     convert two_digits to index for digit using mod 10(digits) or mod 26(letters)
#     prepend to single chars digits[index]
# - 2 times iteration
#   similar to 3 times iteration, just use different char set (indexed for Letters or digits)
# - return single_chars joined

# random decimal from rand
# => 0.4377277390071145
# convert to string

# 10 digit random_key
# =>Integer(random * 10**10)
# => 7853585837

# loop until random value is 0
#   - value, divmod(value)

class Robot
  @@preexisting_ids = []
  LETTERS = ('A'..'Z').to_a
  DIGITS = ('0'..'9').to_a

  attr_reader :name

  def initialize
    @name = random_name
  end

  def reset
    @name = random_name
  end

  private

  def random_name
    name_id = make_uniq_id
    single_chars = []
    3.times do
      name_id, last_2_digits = name_id.divmod(100)
      single_chars.prepend(DIGITS[last_2_digits % 10])
    end
    2.times do
      name_id, last_2_digits = name_id.divmod(100)
      single_chars.prepend(LETTERS[last_2_digits % 26])
    end
    single_chars.join
  end

  def make_uniq_id
    id = ''
    loop do
      id = Integer(rand * 10**10)
      break unless @@preexisting_ids.include?(id)
    end
    @@preexisting_ids << id
    id
  end
end
